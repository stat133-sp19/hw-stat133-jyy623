stop("invalid success values")
}else if(sum(trials < success) > 1){
stop("success can't be greater than trials")
} else{
return(TRUE)
}
# The title is ckeck_success.
# This function tells if a input is a valid value for number of success or not.
# The input parameters are a numeric value trails and a numeric value success
# The output is logical value TRUE.
check_success = function(trials, success){
if(check_trials(trials) == FALSE){
stop("invalid trial values")
} else if(mode(success) != "numeric"){
stop("invalid success values")
} else if(success %% 1 != 0){
stop("invalid success values")
}else if(sum(trials < success) > 1){
stop("success can't be greater than trials")
} else{
return(TRUE)
}
}
check_success(5, 1:3)
# The title is ckeck_success.
# This function tells if a input is a valid value for number of success or not.
# The input parameters are a numeric value trails and a numeric value success
# The output is logical value TRUE.
check_success = function(trials, success){
if(check_trials(trials) == FALSE){
stop("invalid trial values")
} else if(mode(success) != "numeric"){
stop("invalid success values")
} else if(success %% 1 != rep(0, length(success))){
stop("invalid success values")
}else if(sum(trials < success) > 1){
stop("success can't be greater than trials")
} else{
return(TRUE)
}
}
check_success(5, 1:3)
1:3 %%1
1:3 %%1 == rep(0,3)
# The title is ckeck_success.
# This function tells if a input is a valid value for number of success or not.
# The input parameters are a numeric value trails and a numeric value success
# The output is logical value TRUE.
check_success = function(trials, success){
if(check_trials(trials) == FALSE){
stop("invalid trial values")
} else if(mode(success) != "numeric"){
stop("invalid success values")
} else if(sum(success %% 1 == rep(0, length(success))) != length(success)){
stop("invalid success values")
}else if(sum(trials < success) > 1){
stop("success can't be greater than trials")
} else{
return(TRUE)
}
}
check_success(5, 1:3)
1:3 %%1 == rep(0,3)
#' @title bin_probability
#' @description  this function calculates the probabilty of getting k successes about of n trails with prob p of success
#' @param success numeric vaule of number of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_probability(success = 2, trials = 5 prob = 0.5)
bin_probability = function(success, trials, prob){
choose1 = choose(trials, success)
probability = choose1 * prob ^ success * (1 - prob)^(trails - success)
}
bin_probability(1,5,0.5)
#' @title bin_probability
#' @description  this function calculates the probabilty of getting k successes about of n trails with prob p of success
#' @param success numeric vaule of number of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_probability(success = 2, trials = 5 prob = 0.5)
bin_probability = function(success, trials, prob){
choose1 = choose(trials, success)
probability = choose1 * prob ^ success * (1 - prob)^(trials - success)
}
bin_probability(1,5,0.5)
#' @title bin_probability
#' @description  this function calculates the probabilty of getting k successes about of n trails with prob p of success
#' @param success numeric vaule of number of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_probability(success = 2, trials = 5 prob = 0.5)
bin_probability = function(success, trials, prob){
choose1 = choose(trials, success)
probability = choose1 * prob ^ success * (1 - prob)^(trials - success)
return(probability)
}
bin_probability(1,5,0.5)
#' @title bin_probability
#' @description  this function calculates the probabilty of getting k successes about of n trails with prob p of success
#' @param success numeric vaule of number of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_probability(success = 2, trials = 5 prob = 0.5)
bin_probability = function(success, trials, prob){
if(check_success(trials, success) != TRUE){
stop("invalid success values")
} else if(check_trials(trials) != TRUE){
stop("invalid trial value")
} else if(check_prob(prob) != TRUE){
stop("invalid prob value")
} else{
choose1 = choose(trials, success)
probability = choose1 * prob ^ success * (1 - prob)^(trials - success)
return(probability)
}
}
bin_probability(1,2,0.5)
bin_probability(1,2,1)
bin_probability(1,2,2)
bin_probability(1,1.1,0.5)
bin_probability(1,0,0.5)
bin_probability(3,2,0.5)
bin_probability(3,2,0.5)
check_success(3,2)
#' @title bin_probability
#' @description  this function calculates the probabilty of getting k successes about of n trails with prob p of success
#' @param success numeric vaule of number of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_probability(success = 2, trials = 5 prob = 0.5)
bin_probability = function(success, trials, prob){
if(check_success(trials = trials, success = success) != TRUE){
stop("invalid success values")
} else if(check_trials(trials) != TRUE){
stop("invalid trial value")
} else if(check_prob(prob) != TRUE){
stop("invalid prob value")
} else{
choose1 = choose(trials, success)
probability = choose1 * prob ^ success * (1 - prob)^(trials - success)
return(probability)
}
}
bin_probability(3,2,0.5)
check_success(2,3)
# The title is ckeck_success.
# This function tells if a input is a valid value for number of success or not.
# The input parameters are a numeric value trails and a numeric value success
# The output is logical value TRUE.
check_success = function(trials, success){
if(check_trials(trials) == FALSE){
stop("invalid trial values")
} else if(mode(success) != "numeric"){
stop("invalid success values")
} else if(sum(success %% 1 == rep(0, length(success))) != length(success)){
stop("invalid success values")
}else if(sum(trials < success) > 1){
stop("success can't be greater than trials")
} else{
return(TRUE)
}
}
check_success(2,3)
check_success(2,3)
# The title is ckeck_success.
# This function tells if a input is a valid value for number of success or not.
# The input parameters are a numeric value trails and a numeric value success
# The output is logical value TRUE.
check_success = function(trials, success){
if(check_trials(trials) == FALSE){
stop("invalid trial values")
} else if(mode(success) != "numeric"){
stop("invalid success values")
} else if(sum(success %% 1 == rep(0, length(success))) != length(success)){
stop("invalid success values")
}else if(sum(trials < success) >= 1){
stop("success can't be greater than trials")
} else{
return(TRUE)
}
}
# The title is ckeck_success.
# This function tells if a input is a valid value for number of success or not.
# The input parameters are a numeric value trails and a numeric value success
# The output is logical value TRUE.
check_success = function(trials, success){
if(check_trials(trials) == FALSE){
stop("invalid trial values")
} else if(mode(success) != "numeric"){
stop("invalid success values")
} else if(sum(success %% 1 == rep(0, length(success))) != length(success)){
stop("invalid success values")
}else if(sum(trials < success) > 0){
stop("success can't be greater than trials")
} else{
return(TRUE)
}
}
check_success(2,3)
bin_probability(3,2,0.5)
check_success(2,1:3)
bin_probability(1:5,10,0.5)
bin_probability(3,2,0.5)
check_success(trials = 2, success = 3)
check_success(trials = 2, success = 3) == TRUE
check_success(trials = 2, success = 3) != TRUE
check_trials(0.1)
bin_probability(1:5,10,0.5)
bin_probability(1:5,10,0.5)
check_trials(0.1)
check_trials(0.1) != TRUE
bin_probability(1:5,10.1,0.5)
help("has.error")
bin_probability(1:5,10.1,0.5)
bin_probability(1:5,10,0.5)
bin_probability(1:50,10,0.5)
bin_probability(1:5,10,1.1)
a = data.frame(a = c(1,2), b = c(1,2))
a = data.frame(a = c(1,2), b = c(1,2))
a
class(a)
#' @title bin_bin_distribution
#' @description  this function calculates the probabilty of getting successes in n trails with prob p of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_distribution(trials = 5, prob = 0.5)
bin_distribution = function(trials, prob){
success1 = 0:trials
probability = bin_probability(success = success1, trials = tirals, prob = prob)
df = data.frame(success = success, probability = probability)
return(df)
}
bin_distribution(5, 0.5)
#' @title bin_bin_distribution
#' @description  this function calculates the probabilty of getting successes in n trails with prob p of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_distribution(trials = 5, prob = 0.5)
bin_distribution = function(trials, prob){
success1 = 0:trials
probability = bin_probability(success = success1, trials = trials, prob = prob)
df = data.frame(success = success, probability = probability)
return(df)
}
bin_distribution(5, 0.5)
#' @title bin_bin_distribution
#' @description  this function calculates the probabilty of getting successes in n trails with prob p of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_distribution(trials = 5, prob = 0.5)
bin_distribution = function(trials, prob){
success1 = 0:trials
probability = bin_probability(success = success1, trials = trials, prob = prob)
df = data.frame(success = success1, probability = probability)
return(df)
}
bin_distribution(5, 0.5)
bin_distribution(5.1, 0.5)
class(bin_distribution(5, 0.5))
#' @title bin_bin_distribution
#' @description  this function calculates the probabilty of getting successes in n trails with prob p of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_distribution(trials = 5, prob = 0.5)
bin_distribution = function(trials, prob){
success1 = 0:trials
probability = bin_probability(success = success1, trials = trials, prob = prob)
df = data.frame(success = success1, probability = probability)
class(df) = c("bindis", "data.frame")
return(df)
}
class(bin_distribution(5, 0.5))
#' @export
plot.bindis = function(trials, prob){
dis1 = bin_distribution(trials, prob)
plot(dis1)
}
plot.bindis(5, 0.5)
#' @title bin_bin_distribution
#' @description  this function calculates the probabilty of getting successes in n trails with prob p of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_distribution(trials = 5, prob = 0.5)
bin_distribution = function(trials, prob){
success1 = 0:trials
probability = bin_probability(success = success1, trials = trials, prob = prob)
df = data.frame(success = success1, probability = probability)
class(df) = c("bindis", "data.frame")
return(df)
}
(bin_distribution(5, 0.5)
bin_distribution(5, 0.5)
bin_distribution(5, 0.5)
class(bin_distribution(5, 0.5))
#' @export
plot.bindis = function(trials, prob){
dis1 = bin_distribution(trials, prob)
return(plot(dis1))
}
plot.bindis(5, 0.5)
plot(bin_distribution(5,0.5))
bin_distribution(5,0.5)
plot(dis1)
dis1 = bin_distribution(5,0.5)
plot(dis1)
plot(x = dis1$success, y = dis1$probability)
barplot(x = dis1$success, y = dis1$probability)
barplot(x = dis1$success, y = dis1$probability)
dis1 = bin_distribution(5,0.5)
dist1
dis1
barplot(dist1)
barplot(dis1)
help("barplot")
library(ggplot2)
dis1 = bin_distribution(5, 0.5)
ggplot(dist1) + geom_bar(aes(x = success, y = probability))
dist1 = bin_distribution(5, 0.5)
ggplot(dist1) + geom_bar(aes(x = success, y = probability))
#' @title bin_bin_distribution
#' @description  this function calculates the probabilty of getting successes in n trails with prob p of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_distribution(trials = 5, prob = 0.5)
bin_distribution = function(trials, prob){
success1 = 0:trials
probability = bin_probability(success = success1, trials = trials, prob = prob)
df = data.frame(success = success1, probability = probability)
return(df)
}
dist1 = bin_distribution(5, 0.5)
ggplot(dist1) + geom_bar(aes(x = success, y = probability))
dist1$probability
dis1 = bin_distribution(trials = 5, prob = 5)
dis1 = bin_distribution(trials = 5, prob = 0.5)
plot(dis1)
barplot(dis1)
dis1$success
class(dis1$success)
barplot(height = dis1$success)
barplot(height = dis1$probability)
help("barplot")
barplot(height = dis1$probability, width = dis1$success)
help("barplot")
barplot(height = dis1$probability, names.arg = dis1$success)
barplot(height = dis1$probability, names.arg = dis1$success, xlab = "success", ylab = "probability")
#' @export
plot.bindis = function(trials, prob){
dis = bin_distribution(trails = trials, prob = prob)
barplot(height = dis$probability, names.arg = dis$success, xlab = "success", ylab = "probability")
}
plot.bindis(trials = 5, prob = 0.5)
#' @export
plot.bindis = function(trials, prob){
dis = bin_distribution(trials = trials, prob = prob)
barplot(height = dis$probability, names.arg = dis$success, xlab = "success", ylab = "probability")
}
plot.bindis(trials = 5, prob = 0.5)
plot.bindis(trials = 5, prob = 0.4)
plot.bindis(trials = 10, prob = 0.5)
plot.bindis(trials = 5, prob = 0.5)
#' @title bin_bin_cumulative
#' @description  this function calculates the probabilty of getting successes in n trails with prob p of success
#' and the cumulative probability
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_distribution(trials = 5, prob = 0.5)
bin_cumulative = function(trials, prob){
success2 = 0:trials
probability2 = bin_probability(success = success2, trials = trials, prob = prob)
cumulative = rep(0, (trials + 1))
for (i in 0:trials) {
cumulative[(i+1)] = sum(probability2[1:(i+1)])
}
df1 = data.frame(
success = success2, probability = probability2, cumulative = cumulative)
class(df1) = c("bincum", "data.frame")
return(df1)
}
bin_cumulative(trials = 5, prob = 0.5)
#' @export
plot.bincum = function(trials, prob){
dis1 = bin_cumulative(trials = trials, prob = prob)
plot(x = dis1$success, y = dis1$cumulative, type = "o")
}
plot.bincum(trials = 5, prob = 0.5)
#' @export
plot.bincum = function(trials, prob){
dis1 = bin_cumulative(trials = trials, prob = prob)
plot(x = dis1$success, y = dis1$cumulative, type = "o", xlab = "successes", ylab = "probability")
}
plot.bincum(trials = 5, prob = 0.5)
#' @title bin_bin_variable
#' @description this function returns a list with named elements trials and prob
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_variable(trials = 5, prob = 0.5)
bin_variable = function(trials, prob){
if(check_prob(prob) != TRUE){
stop("invalid probability")
} else if(check_trials(trials) != TRUE){
stop("invalid trials")
} else{
list = list(trials = trials, prob = prob)
return(list)
}
}
bin_variable(10,0.5)
bin_variable(10,1.1)
#' @title bin_bin_variable
#' @description this function returns a list with named elements trials and prob
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_variable(trials = 5, prob = 0.5)
bin_variable = function(trials, prob){
if(check_prob(prob) != TRUE){
stop("invalid probability")
} else if(check_trials(trials) != TRUE){
stop("invalid trials")
} else{
list = list(trials = trials, prob = prob)
class(list) = "binvar"
return(list)
}
}
bin_variable(10,0.5)
#' @export
print.varaince = function(trials, prob, ...){
print(bin_variable(trials, prob))
}
print.varaince(trials = 5, prob = 0.5)
#' @export
print.varaince = function(trials, prob, ...){
print(bin_variable(trials, prob))
invisible(x)
}
print.varaince(trials = 5, prob = 0.5)
help("invisible")
#' @export
print.varaince = function(trials, prob, ...){
print(bin_variable(trials, prob))
invisible(bin_variable((trials, prob)))
}
#' @export
print.varaince = function(trials, prob, ...){
print(bin_variable(trials, prob))
invisible(bin_variable(trials, prob))
}
print.varaince(trials = 5, prob = 0.5)
#' @export
print.varaince = function(x, ...){
print(x$trials)
invisible(x)
}
print.varaince(trials = 5, prob = 0.5)
library(binomial)
x = bin_cumulative(20, 0.5)
plot(x)
x = bin_cumulative(10, 0.5)
plot(x)
methods(plot())
methods(plot)
y = bin_variable(10, 0.5)
y
print(y)
summary(y)
summary(y)
library(devtools)
document()
test()
build()
install()
library(binomial)
y = bin_variable(10, 0.5)
y
summary(y)
summary(y)
document()
test()
build()
install()
library()
library(binomial)
y = bin_variable(10, 0.5)
y
summary(y)
build()
document()
build()
test()
document()
test()
build()
install()
library(binomial)
y = bin_variable(10, 0.5)
y
summary(y)
