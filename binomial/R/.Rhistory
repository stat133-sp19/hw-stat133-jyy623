cat("Measutes\n")
cat("- mean :", aux_mean(x$trials, x$prob), "\n")
cat("- variance :",aux_variance(x$trials, x$prob),"\n")
cat("- mode :", aux_mode(x$trials, x$prob), "\n")
cat("- skewness :", aux_skewness(x$trials, x$prob), "\n")
cat("- kurtosis :", aux_kurtosis(x$trials, x$prob), "\n")
}
#' @title bin_mean
#' @description this function returns the mean of the binomial distribution
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_mean(trials = 5, prob = 0.5)
bin_mean = function(trials, prob){
check_trials(trials)
check_prob(prob)
bin_mean = aux_mean(trials, prob)
return(bin_mean)
}
#' @title bin_variance
#' @description this function returns the variance of the binomial distribution
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_variance(trials = 5, prob = 0.5)
bin_variance = function(trials, prob){
check_trials(trials)
check_prob(prob)
bin_variance = aux_variance(trials, prob)
return(bin_variance)
}
#' @title bin_mode
#' @description this function returns the mode of the binomial distribution
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_mode(trials = 5, prob = 0.5)
bin_mode = function(trials, prob){
check_trials(trials)
check_prob(prob)
bin_mode = aux_mode(trials, prob)
return(bin_mode)
}
#' @title bin_skewness
#' @description this function returns the skewness of the binomial distribution
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_skewness(trials = 5, prob = 0.5)
bin_skewness = function(trials, prob){
check_trials(trials)
check_prob(prob)
bin_skewness = aux_skewness(trials, prob)
return(bin_skewness)
}
#' @title bin_kurtosis
#' @description this function returns the kurtosis of the binomial distribution
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_kurtosis(trials = 5, prob = 0.5)
bin_kurtosis = function(trials, prob){
check_trials(trials)
check_prob(prob)
bin_kurtosis = aux_kurtosis(trials, prob)
return(bin_kurtosis)
}
library(ggplot2)
# The title is check_prob.
# This function tells if a input is a valid probabilit or not.
# The input parameter is a numeric value p.
# The output is logical value TRUE.
check_prob = function(p){
if(class(p) == "numeric" & p >= 0 & p <= 1){
return(TRUE)
} else {
stop("p has to be a number between 0 and 1")
}
}
# The title is ckeck_trials.
# This function tells if a input is a valid value for number of trails or not.
# The input parameter is a numeric value trails.
# The output is logical value TRUE.
check_trials = function(trials){
if(class(trials) != "numeric"){
stop("invalid trials value")
} else if(trials %% 1 != 0){
stop("invalid trials value")
} else{
return(TRUE)
}
}
# The title is ckeck_success.
# This function tells if a input is a valid value for number of success or not.
# The input parameters are a numeric value trails and a numeric value success
# The output is logical value TRUE.
check_success = function(trials, success){
if(check_trials(trials) == FALSE){
stop("invalid trial values")
} else if(mode(success) != "numeric"){
stop("invalid success values")
} else if(sum(success %% 1 == rep(0, length(success))) != length(success)){
stop("invalid success values")
}else if(sum(trials < success) > 0){
stop("success can't be greater than trials")
} else{
return(TRUE)
}
}
# The title is aux_mean.
# This function tells the mean value of a binomial distribution.
# The input parameters are a numeric value trials and a numeric value porb
# The output is a numeric value of the mean of the distribution.
aux_mean = function(trials = 10, prob = 0.3){
mean = trials*prob
return(mean)
}
# The title is aux_variance.
# This function tells the variance of a binomial distribution.
# The input parameters are a numeric value trials and a numeric value porb
# The output is a numeric value of the variance of the distribution.
aux_variance = function(trials = 10, prob = 0.3){
variance = trials*prob*(1-prob)
return(variance)
}
# The title is aux_mode.
# This function tells the mode of a binomial distribution.
# The input parameters are a numeric value trials and a numeric value porb
# The output is a numeric value of the mode of the distribution.
aux_mode = function(trials = 10, prob = 0.3){
m = trials*prob + prob
if(m %% 1 == 0){
return(c(m, m-1))
} else {return(floor(m))
}
}
# The title is aux_skewness.
# This function tells the skewness of a binomial distribution.
# The input parameters are a numeric value trials and a numeric value porb
# The output is a numeric value of the skewness of the distribution.
aux_skewness = function(trials = 10, prob = 0.3){
sd = sqrt(aux_variance(trials, prob))
skewness = (1 - 2 * prob) / sd
return(skewness)
}
# The title is aux_kurtosis.
# This function tells the kurtosis of a binomial distribution.
# The input parameters are a numeric value trials and a numeric value porb
# The output is a numeric value of the kurtosis of the distribution.
aux_kurtosis = function(trials = 10, prob = 0.3){
kurtosis = (1 - 6 * prob * (1-prob))/aux_variance(trials, prob)
return(kurtosis)
}
aux_kurtosis()
#' @title bin_choose
#' @description  this function calculates the number of combinatons in which k successes can occer in n trials
#' @param n numeric vaule of number of trials
#' @param k numeric value of number of success
#' @export
#' @example bin_choose(n = 5, k = 2)
bin_choose = function(n = 5, k){
if(sum(k > n) > 0){
stop("k cannot be greater than n")
} else{
nfac = factorial(n)
kfac = factorial(k)
fac = factorial(n-k)
choose = nfac/(kfac*fac)
return(choose)
}
}
bin_choose(5,1:5)
#' @title bin_probability
#' @description  this function calculates the probabilty of getting k successes in n trails with prob p of success
#' @param success numeric vaule of number of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_probability(success = 2, trials = 5 prob = 0.5)
bin_probability = function(success, trials, prob){
if(check_success(trials = trials, success = success) != TRUE){
stop("invalid success values")
} else if(check_trials(trials) != TRUE){
stop("invalid trial value")
} else if(check_prob(prob) != TRUE){
stop("invalid prob value")
} else{
choose1 = choose(trials, success)
probability = choose1 * prob ^ success * (1 - prob)^(trials - success)
return(probability)
}
}
#' @title bin_bin_distribution
#' @description  this function calculates the probabilty of getting successes in n trails with prob p of success
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_distribution(trials = 5, prob = 0.5)
bin_distribution = function(trials, prob){
success1 = 0:trials
probability = bin_probability(success = success1, trials = trials, prob = prob)
df = data.frame(success = success1, probability = probability)
class(df) = c("bindis", "data.frame")
return(df)
}
#' @export
plot.bindis = function(x, ...){
barplot(height = x$probability, names.arg = x$success, xlab = "successes", ylab = "probability")
}
#' @title bin_bin_cumulative
#' @description  this function calculates the probabilty of getting successes in n trails with prob p of success
#' and the cumulative probability
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_distribution(trials = 5, prob = 0.5)
bin_cumulative = function(trials, prob){
success2 = 0:trials
probability2 = bin_probability(success = success2, trials = trials, prob = prob)
cumulative = rep(0, (trials + 1))
for (i in 0:trials) {
cumulative[(i+1)] = sum(probability2[1:(i+1)])
}
df1 = data.frame(
success = success2, probability = probability2, cumulative = cumulative)
class(df1) = c("bincum", "data.frame")
return(df1)
}
bin_cumulative(trials = 5, prob = 0.5)
#' @export
plot.bincum = function(x,...){
plot(x = x$success, y = x$cumulative, type = "o", xlab = "successes", ylab = "probability")
}
#' @title bin_variable
#' @description this function returns a list with named elements trials and prob
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_variable(trials = 5, prob = 0.5)
bin_variable = function(trials, prob){
if(check_prob(prob) != TRUE){
stop("invalid probability")
} else if(check_trials(trials) != TRUE){
stop("invalid trials")
} else{
list = list(trials = trials, prob = prob)
class(list) = "binvar"
return(list)
}
}
#' @export
print.binvar = function(x, ...) {
cat('"Binomial variable"\n\n')
cat("Parameters\n")
cat("- number of trials:", x$trials,"\n")
cat("- prob of success:", x$prob, "\n")
invisible(x)
}
#' @export
summary.binvar = function(x, ...){
list(trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob))
}
#' @export
print.summary.binvar = function(x, ...){
cat('"Summary Binomial"\n\n')
cat("Parameters")
cat("- number of trials :", x$trials,"\n")
cat("- prob of success : ", x$prob, "\n\n")
cat("Measutes\n")
cat("- mean :", aux_mean(x$trials, x$prob), "\n")
cat("- variance :",aux_variance(x$trials, x$prob),"\n")
cat("- mode :", aux_mode(x$trials, x$prob), "\n")
cat("- skewness :", aux_skewness(x$trials, x$prob), "\n")
cat("- kurtosis :", aux_kurtosis(x$trials, x$prob), "\n")
}
#' @title bin_mean
#' @description this function returns the mean of the binomial distribution
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_mean(trials = 5, prob = 0.5)
bin_mean = function(trials, prob){
check_trials(trials)
check_prob(prob)
bin_mean = aux_mean(trials, prob)
return(bin_mean)
}
#' @title bin_variance
#' @description this function returns the variance of the binomial distribution
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_variance(trials = 5, prob = 0.5)
bin_variance = function(trials, prob){
check_trials(trials)
check_prob(prob)
bin_variance = aux_variance(trials, prob)
return(bin_variance)
}
#' @title bin_mode
#' @description this function returns the mode of the binomial distribution
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_mode(trials = 5, prob = 0.5)
bin_mode = function(trials, prob){
check_trials(trials)
check_prob(prob)
bin_mode = aux_mode(trials, prob)
return(bin_mode)
}
#' @title bin_skewness
#' @description this function returns the skewness of the binomial distribution
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_skewness(trials = 5, prob = 0.5)
bin_skewness = function(trials, prob){
check_trials(trials)
check_prob(prob)
bin_skewness = aux_skewness(trials, prob)
return(bin_skewness)
}
#' @title bin_kurtosis
#' @description this function returns the kurtosis of the binomial distribution
#' @param trials numeric value of number of trials
#' @param prob numeric value of probability of success of each trial
#' @export
#' @example bin_kurtosis(trials = 5, prob = 0.5)
bin_kurtosis = function(trials, prob){
check_trials(trials)
check_prob(prob)
bin_kurtosis = aux_kurtosis(trials, prob)
return(bin_kurtosis)
}
library(devtools)
document()
document()
document()
document()
check_man
test()
test()
test_that("check_prob works as expected", {
expect_equal(check_prob(0.5), TRUE)
expect_error(check_prob(1.1))
expect_error(check_prob("na"))
})
test_that("check_trials works as expected", {
expect_equal(check_trials(10), TRUE)
expect_error(check_trials(0.5))
expect_error(check_trials("la"))
})
test_that("check_success works as expected",{
expect_equal(check_success(10, 5), TRUE)
expect_error(check_success(10.5,5))
expect_error(check_success(10, 20))
expect_error(check_success("a", 5))
})
test_that("aux_mean works as expected", {
expect_equal(aux_mean(10, 0.5), 5)
expect_length(aux_mean(10, 0.5), 1)
expect_type(aux_mean(10, 0.5), "double")
})
test_that("aux_variance works as expected", {
expect_equal(aux_variance(10, 0.3), 2.1)
expect_length(aux_variance(10, 0.5), 1)
expect_type(aux_variance(10, 0.5), "double")
})
test_that("aux_mode works as expected", {
expect_equal(aux_mode(10, 0.3), 3)
expect_length(aux_mode(10, 0.5), 1)
expect_type(aux_mode(10, 0.5), "double")
})
test_that("aux_skewness works as expected", {
expect_equal(aux_skewness(10, 0.3), (1 - 2*0.3)/sqrt(aux_variance(10, 0.3)))
expect_length(aux_skewness(10, 0.5), 1)
expect_type(aux_skewness(10, 0.5), "double")
})
test_that("aux_kurtosis works as expected", {
expect_equal(aux_kurtosis(10, 0.3), (1 - 6 * 0.3 * (1 - 0.3))/aux_variance(10, 0.3))
expect_length(aux_kurtosis(10, 0.5), 1)
expect_type(aux_kurtosis(10, 0.5), "double")
})
test_that("bin_choose works as expected", {
expect_equal(bin_choose(5, 0), 1)
expect_error(bin_choose(5, 10))
expect_equal(bin_choose(5, 0:1), c(1,5))
})
test_that("bin_probability works as expected", {
expect_equal(bin_probability(2, 5, 0.5), 0.3125)
expect_equal(bin_probability(0:2, 5, 0.5), c(0.03125, 0.15625, 0.3125))
expect_error(bin_probability(2.5, 10, 0.5))
})
test_that("bin_distribution works as expected", {
expect_is(bin_distribution(5, 0.5), c("bindis", "data.frame"))
expect_length(bin_distribution(5, 0.5), 2)
expect_named(bin_distribution(5, 0.5),c("success", "probability"))
})
test_that("bin_cumulative works as expected", {
expect_is(bin_cumulative(5, 0.5), c("bindis", "data.frame"))
expect_length(bin_cumulative(5, 0.5), 3)
expect_named(bin_cumulative(5, 0.5),c("success", "probability", "cumulative"))
})
test()
test_that("bin_cumulative works as expected", {
expect_is(bin_cumulative(5, 0.5), c("bindis", "data.frame"))
expect_length(bin_cumulative(5, 0.5), 3)
expect_named(bin_cumulative(5, 0.5),c("success", "probability", "cumulative"))
})
test_that("bin_distribution works as expected", {
expect_is(bin_distribution(5, 0.5), c("bindis", "data.frame"))
expect_length(bin_distribution(5, 0.5), 2)
expect_named(bin_distribution(5, 0.5),c("success", "probability"))
})
test_that("bin_probability works as expected", {
expect_equal(bin_probability(2, 5, 0.5), 0.3125)
expect_equal(bin_probability(0:2, 5, 0.5), c(0.03125, 0.15625, 0.3125))
expect_error(bin_probability(2.5, 10, 0.5))
})
test_that("bin_choose works as expected", {
expect_equal(bin_choose(5, 0), 1)
expect_error(bin_choose(5, 10))
expect_equal(bin_choose(5, 0:1), c(1,5))
})
test_that("aux_kurtosis works as expected", {
expect_equal(aux_kurtosis(10, 0.3), (1 - 6 * 0.3 * (1 - 0.3))/aux_variance(10, 0.3))
expect_length(aux_kurtosis(10, 0.5), 1)
expect_type(aux_kurtosis(10, 0.5), "double")
})
library(testthat)
source("./R/binomial_functions.R")
context("Test for check functions")
test_that("check_prob works as expected", {
expect_equal(check_prob(0.5), TRUE)
expect_error(check_prob(1.1))
expect_error(check_prob("na"))
})
test_that("check_trials works as expected", {
expect_equal(check_trials(10), TRUE)
expect_error(check_trials(0.5))
expect_error(check_trials("la"))
})
test_that("check_success works as expected",{
expect_equal(check_success(10, 5), TRUE)
expect_error(check_success(10.5,5))
expect_error(check_success(10, 20))
expect_error(check_success("a", 5))
})
context("Test for aux functions")
test_that("aux_mean works as expected", {
expect_equal(aux_mean(10, 0.5), 5)
expect_length(aux_mean(10, 0.5), 1)
expect_type(aux_mean(10, 0.5), "double")
})
test_that("aux_variance works as expected", {
expect_equal(aux_variance(10, 0.3), 2.1)
expect_length(aux_variance(10, 0.5), 1)
expect_type(aux_variance(10, 0.5), "double")
})
test_that("aux_mode works as expected", {
expect_equal(aux_mode(10, 0.3), 3)
expect_length(aux_mode(10, 0.5), 1)
expect_type(aux_mode(10, 0.5), "double")
})
test_that("aux_skewness works as expected", {
expect_equal(aux_skewness(10, 0.3), (1 - 2*0.3)/sqrt(aux_variance(10, 0.3)))
expect_length(aux_skewness(10, 0.5), 1)
expect_type(aux_skewness(10, 0.5), "double")
})
test_that("aux_kurtosis works as expected", {
expect_equal(aux_kurtosis(10, 0.3), (1 - 6 * 0.3 * (1 - 0.3))/aux_variance(10, 0.3))
expect_length(aux_kurtosis(10, 0.5), 1)
expect_type(aux_kurtosis(10, 0.5), "double")
})
context("Test for bin functions")
test_that("bin_choose works as expected", {
expect_equal(bin_choose(5, 0), 1)
expect_error(bin_choose(5, 10))
expect_equal(bin_choose(5, 0:1), c(1,5))
})
test_that("bin_probability works as expected", {
expect_equal(bin_probability(2, 5, 0.5), 0.3125)
expect_equal(bin_probability(0:2, 5, 0.5), c(0.03125, 0.15625, 0.3125))
expect_error(bin_probability(2.5, 10, 0.5))
})
test_that("bin_distribution works as expected", {
expect_is(bin_distribution(5, 0.5), c("bindis", "data.frame"))
expect_length(bin_distribution(5, 0.5), 2)
expect_named(bin_distribution(5, 0.5),c("success", "probability"))
})
test_that("bin_cumulative works as expected", {
expect_is(bin_cumulative(5, 0.5), c("bindis", "data.frame"))
expect_length(bin_cumulative(5, 0.5), 3)
expect_named(bin_cumulative(5, 0.5),c("success", "probability", "cumulative"))
})
test()
build_vignettes()
build()
install(binomial)
install()
library(binomial)
library(binomial)
bin_cumulative(10,0.3)
x = bin_cumulative(10,0.3)
plot.bincum(x)
